```{=html}
<style>
  body{text-align: justify}
</style>
```

:::: progress
:::: {.progress-bar style="width: 100%;"}
::::
::::

# Técnicas Paramétricas - Modelos Probabilísticos

## Introdução

No capítulo anterior, foi apresentada uma abordagem não paramétrica para a análise de dados de sobrevivência, na qual a estimação é realizada sem assumir uma distribuição de probabilidade específica para o tempo de sobrevivência.

Os estimadores não paramétricos são derivados diretamente do conjunto de dados, pressupondo que o mecanismo gerador das informações opera de maneira distinta em diferentes momentos no tempo, funcionando de forma quase independente. Assim, conclui-se que a abordagem não paramétrica possui tantos parâmetros quanto intervalos de tempo considerados. Contudo, ao incluir covariáveis, o modelo de Kaplan-Meier não permite estimar diretamente o "efeito" dessas covariáveis, limitando-se a comparar e testar a igualdade entre diferentes curvas de sobrevivência.

Por outro lado, nos modelos de regressão tradicionais, como os modelos *linear*, *Poisson* ou *logístico*, a escolha de uma distribuição de probabilidade para a variável resposta $Y$ e de uma função para a relação entre $Y$ e as covariáveis $x_{1}, x_{2}, \ldots, x_{p}$ é essencial para identificar o modelo. Ao aplicar esse conceito na análise de sobrevivência, o tempo até a ocorrência de um evento de interesse é tratado como a variável resposta.

Nesse contexto, este capítulo introduz uma abordagem paramétrica para estimar as funções básicas de sobrevivência. Assume-se que a distribuição de probabilidade do tempo de ocorrência do evento é conhecida, permitindo a estimação dos parâmetros associados ao modelo de forma mais estruturada e eficiente.

## Distribuições do Tempo de Sobrevivência

Seja $T$ uma variável aleatória que representa o "tempo de sobrevivência". Qual seria a distribuição de probabilidade mais adequada para representá-la?

Uma característica fundamental da variável aleatória $T$ é que ela é contínua e não negativa. Com base nessa propriedade, é possível eliminar algumas distribuições como candidatas adequadas para modelar $T$. Por exemplo, a distribuição normal não é apropriada, pois admite valores negativos, o que contradiz a natureza do tempo de sobrevivência. Além disso, os tempos de sobrevivência frequentemente apresentam uma forte assimetria à direita, reforçando a inadequação da distribuição normal para esse contexto.

```{r message=FALSE, warning=FALSE}
library(dplyr)
library(ggplot2)

# Semente
set.seed(123456789)

# Tamanho Amostral
n <- 1000
```


### Distribuição Exponencial {#sec-DistExp}

Se $T \sim Exp(\alpha)$, a sua função densidade de probabilidade é expressa da seguinte forma:

$$
f(t) = \alpha \exp\{ -\alpha t \}, \ t \geq 0 \ \text{e} \ \alpha > 0.
$$ {#eq-densitExp}

Desta forma, podemos obter a função de sobrevivência com base no completar da distribuição acumulada de $T$:

```{=latex}
\begin{align*}
    S(t) & = P(T > t) = 1 - P(T \leq t) = 1 - F(t) \\
         & = 1 - [1 - \exp\{ -\alpha t \}] \\
         & = \exp\{ -\alpha t \}.
\end{align*}
```

Assim definimos, formalmente, a função de sobrevivência como:

$$
S(t) = \exp\{ -\alpha t \}.
$$ {#eq-StExp}

Note que o parâmetro $\alpha$ é a velocidade de queda da função sobrevivência. Através das relações entre as funções em análise de sobrevivência, temos a função risco ou taxa de falha. Obtida pela razão entre da função densidade de probabilidade e a função de sobrevivência:

$$
\lambda(t) = \dfrac{f(t)}{S(t)} = \dfrac{\alpha \exp\{ -\alpha t \}}{\exp\{ -\alpha t \}} = \alpha = \text{constante}.
$$ {#eq-RiscoExp}

Sendo a função risco constante para todo tempo observado $t$, o risco acumulado é função linear no tempo com uma inclinação da reta dada por $\alpha$:

$$
\Lambda(t) = - \ln[S(t)] = - \ln[ \exp\{ -\alpha t \} ] = - (- \alpha t) = \alpha t
$$ {#eq-RiscoAcumExp}

Com o objetivo de facilitar a visualização e aprimorar o aprendizado do leitor, foram simuladas as funções, acima, definidas.

```{r message=FALSE, warning=FALSE}
# ---------------------------
# [1] DISTRIBUIÇÃO EXPONENCIAL
# ---------------------------
# -------------
# [1.1] FUNÇÕES
# -------------
ftexp <- function(t, alpha) alpha * exp(-alpha * t)
Stexp <- function(t, alpha) exp(-alpha * t)
htexp <- function(t, alpha) rep(alpha, length(t))
Ltexp <- function(t, alpha) alpha * t

# ----------------------------------------
# [1.2] SIMULAÇÃO E VARIAÇÃO DE PARÂMETROS
# ----------------------------------------
tempo <- rexp(n, rate = 1) # Simulando dados de uma exponencial
alphas <- c(1, 1.5, 2)     # Valores do parâmetro a serem avaliados

# Criando um Data Frame com valores das funções
dados <- do.call(rbind, lapply(alphas, function(alpha) {
  data.frame(
    tempo = sort(tempo),
    ft = ftexp(sort(tempo), alpha),
    St = Stexp(sort(tempo), alpha),
    ht = htexp(sort(tempo), alpha),
    Lt = Ltexp(sort(tempo), alpha),
    alpha = factor(alpha)
  )
}))

# --------------------
# [1.3] FUNÇÃO GRÁFICA
# --------------------

PlotFunction <- function(dados, ft, label) {
  ggplot(data = dados, aes_string(x = "tempo", y = ft, color = "alpha")) +
    geom_line(size = 1.2) +
    labs(
      x = "Tempo",
      y = label, 
      color = expression(alpha)
    ) +
    scale_color_manual(
      values = c("red", "blue", "green"),
      labels = scales::parse_format()(levels(dados$alpha))
    ) +
    theme_minimal(base_size = 12)
}
```

Veja, a seguir, a @fig-CurvasExp que mostra as curvas de densidade de probabilidade, de sobrevivência, risco e risco acumulado para diferentes valores do parâmetro $\alpha$.

```{r message=FALSE, warning=FALSE}
#| fig-cap: "Funções Densidade de Probabilidade, Sobrevivência, Risco e Risco Acumulado segundo uma Distribuição Exponencial para diferentes valores do parâmetro de taxa."
#| fig-cap-location: top
#| fig-subcap: 
#| - "Função Densidade de Probabilidade"
#| - "Função de Sobrevivência"
#| - "Função de Risco"
#| - "Função de Risco Acumulado"
#| layout-ncol: 2
#| layout-nrow: 2
#| label: fig-CurvasExp

# Plotando a função densidade de probabilidade
PlotFunction(dados, "ft", "Função Densidade de Probabilidade")

# Plotando a função de sobrevivência
PlotFunction(dados, "St", "Função de Sobrevivência")

# Plotando a função de risco
PlotFunction(dados, "ht", "Função de Risco")

# Plotando a função de risco acumulado
PlotFunction(dados, "Lt", "Função de Risco Acumulado")
```

#### Algumas considerações

Note que, quanto maior o valor de $\alpha$ (risco), mais abruptamente a função de sobrevivência $S(t)$ decresce, e maior é a inclinação da função de risco acumulado.

A distribuição exponencial, por possuir um único parâmetro, é matematicamente simples e apresenta um formato assimétrico. Seu uso em análise de sobrevivência tem uma analogia com a suposição de normalidade em outras técnicas e áreas da estatística. Entretanto, a suposição de risco constante associada a essa distribuição é bastante restritiva e, em muitos casos, pode não ser realista.

Por exemplo, considere um estudo sobre câncer, em que o tempo até o evento de interesse é definido como o período até a morte ou a cura do paciente. Para aplicar a distribuição exponencial nesse contexto, seria necessário assumir que o tempo desde o diagnóstico da doença não afeta a probabilidade de ocorrência do evento. Essa suposição é delicada, pois o próprio passar do tempo afeta naturalmente a probabilidade de sobrevivência, o risco e o risco acumulado, entre outros fatores. Isso pode ocorrer por causas naturais, como o envelhecimento, que aumenta o risco com o avanço da idade. Essa característica da distribuição exponencial é conhecida como falta de memória, o que significa que o risco futuro é independente do tempo já decorrido.

Quando $\alpha = 1$, a distribuição é denominada exponencial padrão. A média e a variância do tempo de sobrevivência, para uma variável que segue a distribuição exponencial, são expressas como funções inversas do parâmetro de risco ($\alpha$). Assim, quanto maior o risco, menor o tempo médio de sobrevivência e menor a variabilidade em torno da média. As expressões são dadas por:

$$
E[T] = \dfrac{1}{\alpha},
$$

$$
Var[T] = \dfrac{1}{\alpha^2}.
$$
Como a distribuição de $T$ é assimétrica, se torna mais usual utilizar o *tempo mediano de sobrevivência* ao invés de tempo médio. Pode-se obter o tempo mediano de sobrevivência a partir de um tempo $t$, tal que, $S(t) = 0,5$, logo,

```{=latex}
\begin{align*}
    S(t) & = 0,5 \Leftrightarrow \exp\{ -\alpha t \} = 0,5 \Leftrightarrow -\alpha t = \ln(2^{-1}) \\
    \alpha t & = - [-\ln(2)] \Leftrightarrow \alpha t = \ln(2).
\end{align*}
```

Desta forma, o tempo mediano de sobrevivência é definido como:

$$
T_{mediano} = \dfrac{\ln(2)}{\alpha}.
$$

Em resumo, o modelo exponencial é apropriado para situações em que o período do experimento é curto o suficiente para que a suposição de risco constante seja plausível.

### Distribuição Weibull {#sec-DistWeibull}

Na maioria dos casos de análise de sobrevivência na área da saúde, é mais razoável supor que o risco varia ao longo do tempo, em vez de permanecer constante.

Atualmente, a *Distribuição Weibull* é amplamente utilizada, pois permite modelar essa variação do risco ao longo do tempo. Como será demonstrado, a distribuição exponencial é um caso particular da distribuição Weibull.

Se o tempo de sobrevivência $T$ segue uma distribuição Weibull, ou seja, $T \sim Weibull(\gamma, \alpha)$, sua função densidade de probabilidade é dada por:

$$
f(t) = \dfrac{ \gamma }{ \alpha^{\gamma} } t^{\gamma - 1} \exp \left\{ - \left( \dfrac{t}{\alpha} \right)^{\gamma} \right\}.
$$ {#eq-densittWei}

A partir da @eq-densittWei é possível chegar a função de sobrevivência da distribuição Weibull sendo está função definida como:

$$
S(t) = \exp \left\{ - \left( \dfrac{t}{\alpha} \right)^{\gamma} \right\},
$$ {#eq-StWeibull}

onde $t \geq 0$, $\alpha$ o parâmetro escala (ou taxa) e $\gamma$ parâmetro de forma. Ambos os parâmetros sempre positivos.

A função de risco, $\lambda(t)$, depende do tempo de sobrevivência. Apresentando variação no tempo conforme a expressão:

$$
\lambda (t) = \dfrac{f(t)}{S(t)} = \dfrac{ \gamma }{ \alpha^{\gamma} } t^{\gamma - 1}
$$ {#eq-RiscoWeibull}

e a função de risco acumulado da distribuição Weibull é dada por:

$$
\Lambda (t) = - \ln[S(t)] = - \ln \left[ \exp \left\{ - \left( \dfrac{t}{\alpha} \right)^{\gamma} \right\} \right] = \left( \dfrac{t}{\alpha} \right)^{\gamma}.
$$ {#eq-RiscAcumWeibull}

Note que, o parâmetro $\gamma$ determina a forma função de risco da seguinte maneira:

-   $\gamma < 1 \rightarrow$ função de risco decresce;
-   $\gamma > 1 \rightarrow$ função de risco cresce;
-   $\gamma = 1 \rightarrow$ função de risco constante, caindo no caso particular da distribuição exponencial.

Assim como na distribuição exponencial, com objetivo de facilitar a visualização e aprimorar o aprendizado do leitor, foram simuladas as funções das @eq-densittWei, @eq-StWeibull, @eq-RiscoWeibull e @eq-RiscAcumWeibull.

```{r message=FALSE, warning=FALSE}
# ------------------------
# [2] DISTRIBUIÇÃO WEIBULL
# ------------------------
# -------------
# [2.1] FUNÇÕES
# -------------
ftWei <- function(t, gamma, alpha) {
  ft <- gamma*alpha^(-gamma)*t^(gamma-1)*exp(-(t/alpha)^gamma)
  return(ft)
}
StWei <- function(t, gamma, alpha) {
  St <- exp(-(t/alpha)^gamma)
  return(St)
}
htWei <- function(t, gamma, alpha) {
  ht <- gamma*alpha^(-gamma)*t^(gamma-1)
  return(ht)
}
LtWei <- function(t, gamma, alpha) {
  Lt <- (t/alpha)^gamma
  return(Lt)
}

# ----------------------------------------
# [2.2] SIMULAÇÃO E VARIAÇÃO DE PARÂMETROS
# ----------------------------------------
tempo <- rweibull(n, shape = 2, scale = 1) # Simulando dados de uma Weibull
alpha <- 1                                 # Fixo para simplificar
gammas <- c(0.5, 1.0, 1.5, 2.0, 2.5, 3.0)  # # Valores do parâmetro a serem avaliados

# Criando um Data Frame com valores das funções
dados <- do.call(rbind, lapply(gammas, function(gamma) {
  data.frame(
    tempo = sort(tempo),
    ft = ftWei(sort(tempo), gamma, alpha),
    St = StWei(sort(tempo), gamma, alpha),
    ht = htWei(sort(tempo), gamma, alpha),
    Lt = LtWei(sort(tempo), gamma, alpha),
    gamma = factor(gamma)
  )
}))

# --------------------
# [2.3] FUNÇÃO GRÁFICA
# --------------------
PlotFunction <- function(dados, ft, label) {
  ggplot(data = dados, aes_string(x = "tempo", y = ft, color = "gamma")) +
    geom_line(size = 1.2) +
    labs(
      x = "Tempo",
      y = label, 
      color = expression(gamma)
    ) +
    scale_color_manual(
      values = c("red", "blue", "green", "purple", "orange", "brown"),
      labels = scales::parse_format()(levels(dados$gamma))
    ) +
    theme_minimal(base_size = 12)
}
```

Veja, a seguir, a @fig-CurvasWeibull que mostra as curvas de densidade, sobrevivência, risco e risco acumulado para diferentes valores do parâmetro de forma $\gamma$ e o de escala $\alpha = 1$.

```{r message=FALSE, warning=FALSE}
#| fig-cap: "Funções Densidade de Probabilidade, Sobrevivência, Risco e Risco Acumulado segundo uma Distribuição Weibull para diferentes valores do parâmetro de forma."
#| fig-cap-location: top
#| fig-subcap: 
#| - "Função Densidade de Probabilidade"
#| - "Função de Sobrevivência"
#| - "Função de Risco"
#| - "Função de Risco Acumulado"
#| layout-ncol: 2
#| layout-nrow: 2
#| label: fig-CurvasWeibull

# Plotando a função densidade de probabilidade
PlotFunction(dados, "ft", "Função Densidade de Probabilidade")

# Plotando a função de sobrevivência
PlotFunction(dados, "St", "Função de Sobrevivência")

# Plotando a função de risco
PlotFunction(dados, "ht", "Função de Risco")

# Plotando a função de risco acumulado
PlotFunction(dados, "Lt", "Função de Risco Acumulado")
```

#### Algumas considerações

É incluso a função gama na média e variância da distribuição Weibull, assim,

$$
E[T] = \alpha \Gamma[1 + (1/\gamma)]
$$
e

$$
Var[T] = a^{2} \left[ \Gamma [1 + (2/\gamma)] - \Gamma [1 + (1/\gamma)]^{2} \right]
$$

sendo a função gama $\Gamma [k]$, expressa por $\Gamma [k] = \int_{0}^{\infty} t^{k -1} \exp\{t\} dt$.

Afim de se obter o tempo mediano de sobrevivência, igualamos a probabilidade de sobrevivência a $0,5$. Desta forma:

```{=latex}
\begin{align*}
    S(t) & = 0,5 \Leftrightarrow \exp \left\{ - \left( \dfrac{t}{\alpha} \right)^{\gamma} \right\} = 0,5 \\
    - \left( \dfrac{t}{\alpha} \right)^{\gamma} & = \ln{(2^{-1})} \Leftrightarrow \left( \dfrac{t}{\alpha} \right)^{\gamma} = \ln{(2)} \\
    \dfrac{t}{\alpha} & = [\ln{(2)}]^{1/\gamma}.
\end{align*}
```

Logo, definimos o tempo mediano de sobrevivência da distribuição Weibull como:

$$
T_{mediano} = \alpha [\ln{(2)}]^{1/\gamma}.
$$

### Distribuição Log-normal

Uma outra possibilidade para modelar o tempo de sobrevivência é a *distribuição Log-normal*. Dizer que $T \sim Normal(\mu, \sigma^{2})$ implica em dizer que $\ln(T) \sim Log-normal(\mu, \sigma^{2})$ em que $\mu$ é a média do logaritmo do tempo de falha e $\sigma^{2}$ sua variância. Pode-se fazer uso desta relação para modelar o tempo de sobrevivência conforme uma distribuição normal, desde que, se aplique o logaritmo aos dados observados. A função densidade para tal distribuição é dada por:

$$
f (t) = \dfrac{1}{t \sigma \sqrt{2 \pi}} \exp \left\{- \dfrac{1}{2} \left(\dfrac{\ln(t) - \mu}{\sigma}\right)^{2} \right\}.
$$ {#eq-densitLognormal}

Assim, quando o tempo de sobrevivência segue uma distribuição log-normal, sua função de sobrevivência e as demais não tem uma forma análitica explícita, desde modo, deve-se fazer uso das relações entre as funções para se obter a função taxa de falha e taxa de falha acumulada. Desta forma, essas funções são expressas, respectivamente, por:

$$
S (t) = \Phi \left( \dfrac{- \ln(t) + \mu}{\sigma} \right),
$$ {#eq-StLognormal}

$$
\lambda (t) = \dfrac{f(t)}{S(t)}
$$

e

$$
\Lambda (t) = - \ln[S(t)]
$$

em que $\Phi (\cdot)$ é a função de distribuição acumulada da normal padrão.

Assim como ocorreu com as outras distribuições. Foram ilustradas as funções e densidade, sobrevivência, risco e risco acumulado.

```{r message=FALSE, warning=FALSE}
# ---------------------------
# [3] DISTRIBUIÇÃO LOG-NORMAL
# ---------------------------
# -------------
# [3.1] FUNÇÕES
# -------------
ftlnorm <- function(t, mu, sigma) {
  (1 / (t * sigma * sqrt(2 * pi))) * exp(-0.5 * ((log(t) - mu) / sigma)^2)
}

Stlnorm <- function(t, mu, sigma) {
  1 - pnorm((log(t) - mu) / sigma, lower.tail = TRUE)
}

htlnorm <- function(t, mu, sigma) {
  ftlnorm(t, mu, sigma) / Stlnorm(t, mu, sigma)
}

Ltlnorm <- function(t, mu, sigma) {
  -log(Stlnorm(t, mu, sigma))
}

# ----------------------------------------
# [3.2] SIMULAÇÃO E VARIAÇÃO DE PARÂMETROS
# ----------------------------------------
tempo <- rlnorm(n, meanlog = 0, sdlog = 1) # Simulando dados de uma Log-normal
mus <- c(0, 0.5, 1, 1.5, 2)                # Valores de mu
sigma <- 1                                 # Valor fixo de sigma

# Criando um Data Frame com valores das funções
dados <- do.call(rbind, lapply(mus, function(mu) {
  data.frame(
    tempo = sort(tempo),
    ft = ftlnorm(sort(tempo), mu, sigma),
    St = Stlnorm(sort(tempo), mu, sigma),
    ht = htlnorm(sort(tempo), mu, sigma),
    Lt = Ltlnorm(sort(tempo), mu, sigma),
    mu = factor(mu)
  )
}))

# --------------------
# [3.3] FUNÇÃO GRÁFICA
# --------------------
PlotFunction <- function(dados, ft, label) {
  ggplot(data = dados, aes_string(x = "tempo", y = ft, color = "mu")) +
    geom_line(size = 1.2) +
    labs(
      x = "Tempo",
      y = label, 
      color = expression(mu)
    ) +
    scale_color_manual(
      values = c("red", "blue", "green", "purple", "orange"),
      labels = scales::parse_format()(levels(dados$mu))
    ) +
    theme_minimal(base_size = 12)
}
```

Veja a @fig-CurvasLognormal que ilustras as curvas usadas na análise de sobrevivência segundo uma distribuição log-normal.

```{r message=FALSE, warning=FALSE}
#| fig-cap: "Funções Densidade de Probabilidade, Sobrevivência, Risco e Risco Acumulado segundo uma Distribuição Log-normal para diferentes valores do parâmetro de média."
#| fig-cap-location: top
#| fig-subcap: 
#| - "Função Densidade de Probabilidade"
#| - "Função de Sobrevivência"
#| - "Função de Risco"
#| - "Função de Risco Acumulado"
#| layout-ncol: 2
#| layout-nrow: 2
#| label: fig-CurvasLognormal

# Plotando a função densidade de probabilidade
PlotFunction(dados, "ft", "Função Densidade de Probabilidade")

# Plotando a função de sobrevivência
PlotFunction(dados, "St", "Função de Sobrevivência")

# Plotando a função de risco
PlotFunction(dados, "ht", "Função de Risco")

# Plotando a função de risco acumulado
PlotFunction(dados, "Lt", "Função de Risco Acumulado")
```

#### Algumas considerações

A média e a variância da distribuição log-normal são, respectivamente, dadas por:

$$
E[T] = \exp\{ \mu + \sigma^{2} / 2 \}
$$

e

$$
Var[T] = \exp\{ 2 \mu + \sigma^{2} \} (\exp\{ \sigma^{2} - 1 \})
$$

## Estimação de Parâmetros

Foram apresentados alguns modelos probabilísticos. Esses modelos possuem quantidades desconhecidas, denominadas **parâmetros**, ou **parâmetro**, quando o modelo depende de uma única quantidade desconhecida, como no caso da distribuição exponencial.

### Método de Máxima Verossimilhança

O *Método de Máxima Verossimilhança* baseia-se no princípio de que, a partir de uma amostra aleatória, a melhor estimativa para o parâmetro de interesse é aquela que maximiza a probabilidade daquela amostra observada ter sido observada [@bussab2010estatistica]. 

De forma simples, o método de máxima verossimilhança condensa toda a informação contida na amostra, por meio da **função de verossimilhança**, para encontrar o(s) parâmetro(s) da distribuição que melhor expliquem os dados. Essa abordagem utiliza o produtório das densidades $f(t)$ para cada observação $t_i$, $i = 1, 2, \ldots, n$. Em livros introdutórios de estatística, a função de verossimilhança é definida da seguinte maneira, para um parâmetro ou vetor de parâmetros $\theta$:

$$
L(\theta) = \prod_{i = 1}^{n} f(t_{i}, \theta).
$$

Observe que $L$ é uma função de $\theta$, que pode ser um único parâmetro ou um vetor de parâmetros, como ocorre na distribuição log-normal, onde $\theta = (\mu, \sigma^2)$. No entanto, em análise de sobrevivência, essa definição tradicional de verossimilhança é insuficiente, pois os dados frequentemente apresentam **censura**, o que implica que o tempo de falha pode ser apenas parcialmente observado. 

Para lidar com essa característica, utiliza-se a variável indicadora $\delta_{i}$, apresentada na @sec-ReprDados, que identifica se o $i$-ésimo tempo é um tempo de falha ou de censura. Com base nessa informação, a função de verossimilhança é ajustada da seguinte forma:

- Para $\delta_{i} = 1$, o $i$-ésimo tempo é um tempo de falha, e sua contribuição para $L(\theta)$ é a densidade de probabilidade $f(t_{i}, \theta)$.
- Para $\delta_i = 0$, o $i$-ésimo tempo é um tempo censurado, e sua contribuição para $L(\theta)$ é a função de sobrevivência $S(t_i)$.

Assim, a função de verossimilhança ajustada, que incorpora dados censurados, é expressa como:

$$
L(\theta) = \prod_{i = 1}^{n} \left[ f(t_{i}, \theta) \right]^{\delta_i} \left[ S(t_{i}, \theta) \right]^{1 - \delta_{i}}.
$$ {#eq-verossilGeneric}

Para encontrar o valor de $\theta$ que maximiza $L(\theta)$, utiliza-se a derivada do logaritmo da verossimilhança, igualando-a a zero:

$$
\frac{\partial \ln [L(\theta)]}{\partial \theta} = 0.
$$

A solução dessa equação fornece o valor de $\theta$ que maximiza $\ln [L(\theta)]$, e consequentemente, $L(\theta)$.

### Aplicações no Caso de Não Haver Censura

Nesta seção, será demonstrado como determinar o estimador ou os estimadores de máxima verossimilhança para os parâmetros das distribuições discutidas.

#### Distribuição Exponencial

Considere a distribuição exponencial conforme descrita na @sec-DistExp. O **Estimador de Máxima Verossimilhança (EMV)** do parâmetro $\alpha$ pode ser obtido seguindo os passos descritos a seguir:

1. Definir a Função de Verossimilhança $L(\alpha)$:

```{=latex}
\begin{align*}
    L (\alpha) & = \prod_{i = 1}^{n} [\alpha \exp \{-\alpha t_{i}\}]^{\delta_{i}} [\exp \{-\alpha t_{i}\}]^{1 - \delta_{i}} \\
               & = \prod_{i = 1}^{n} \alpha^{\delta_{i}} \exp \{ - \alpha t_{i} \}.
\end{align*}
```

2. Tomar o logaritmo da função verossimilhança $\ln[L(\alpha)]$:

```{=latex}
\begin{align*}
    \ln[L (\alpha)] & = \sum_{i = 1}^{n} \ln \left[ \alpha^{\delta_{i}} \exp \{ - \alpha t_{i} \} \right] = \sum_{i = 1}^{n} \ln \left[ \alpha^{\delta_{i}} \right] + \sum_{i = 1}^{n} \ln \left[ \exp \{ - \alpha t_{i} \} \right] \\
                   & = \sum_{i = 1}^{n} \delta_{i} \ln[\alpha] + \sum_{i = 1}^{n} - \alpha t_{i} =  \ln[\alpha] \sum_{i = 1}^{n} \delta_{i} - \alpha \sum_{i = 1}^{n} t_{i}. \\
\end{align*}
```

3.  Derivar a função do log da verossimilhança $\dfrac{\partial \ln L (\theta)}{\partial \theta} = 0$:

```{=latex}
\begin{align*}
    \dfrac{\partial \ln L (\theta)}{\partial \theta}  & = \dfrac{1}{\alpha} \sum_{i = 1}^{n} \delta_{i} - \sum_{i = 1}^{n} t_{i}.
\end{align*}
```

4. Igualar a derivada a zero e resolver para $\alpha$:

```{=latex}
\begin{align*}
    \dfrac{\partial \ln L (\theta)}{\partial \theta}  & = 0 \\
    \dfrac{1}{\hat{\alpha}} \sum_{i = 1}^{n} \delta_{i} - \sum_{i = 1}^{n} t_{i} & = 0 \\
    \hat{\alpha} & = \dfrac{\sum_{i = 1}^{n} \delta_{i}}{\sum_{i = 1}^{n} t_{i}}
\end{align*}
```

Note que, para o caso em que não se tem censura o numerador, $\sum_{i = 1}^{n} \delta_{i}$, equivale ao tamanho da amostra $n$. Logo, o EMV para $\alpha$ no caso de não haver censura nos dados é:

$$
\hat{\alpha} = \dfrac{n}{\sum_{i = 1}^{n} t_{i}}
$$

A seguir, apresentamos um exemplo computacional. Simulou-se uma amostra proveniente de uma distribuição exponencial e, a partir dessa amostra, obteve-se a estimativa de máxima verossimilhança (EMV) para o parâmetro $\alpha$.

```{r message=FALSE, warning=FALSE}
# Configuração inicial
set.seed(123)
n <- 1000     # Tamanho amostral
alpha <- 1.75 # Parâmetro verdadeiro

# ---------------------------
# [1] Função de Sobrevivência
# ---------------------------
Stexp <- function(t, alpha) exp(-alpha * t)

# -------------------------
# [2] Simulação e Estimação
# -------------------------
tempo <- rexp(n, rate = alpha) # Simulação de tempos de sobrevivência
emvExp <- n / sum(tempo)       # Estimador de Máxima Verossimilhança (EMV)

# -------------------------
# [3] Organização dos Dados
# -------------------------
dados <- data.frame(
  Tempo = sort(tempo),
  St = Stexp(sort(tempo), alpha),
  StEst = Stexp(sort(tempo), emvExp)
)
```

O valor verdadeiro do parâmetro é $\alpha =$ `{r} alpha`. A estimativa de máxima verossimilhança obtida foi $\hat{\alpha} =$ `{r} round(emvExp, 2)`.

Veja a @tbl-EMVexpSt, que apresenta as dez primeiras observações e suas respectivas funções de sobrevivência real e estimada.

```{r message=FALSE, warning=FALSE}
#| tbl-cap: "Comparação da dez primeiras observações entre o valor Real e Estimado da Função de Sobrevivência."
#| label: tbl-EMVexpSt
#| tbl-cap-location: top

library(knitr)

knitr::kable(
  round(head(dados, 10), 4), 
  col.names = c("Tempo", "$S(t)$", "$\\hat{S}(t)$"),
  escape = FALSE,
  align = 'c',
  booktabs = TRUE
)

```

Na @fig-CompEMVexp, comparamos graficamente as duas curvas de sobrevivência, ilustrando o valor real do parâmetro $\alpha$ e sua estimativa $\hat{\alpha}$.

```{r message=FALSE, warning=FALSE}
#| fig-cap: "Comparação do verdadeiro valor do parâmetro $\\alpha$ com sua estimativa de máxima verossimilhança."
#| label: fig-CompEMVexp
#| fig-cap-location: top

library(ggplot2)

ggplot(dados, aes(x = Tempo)) +
  geom_line(aes(y = St, color = "alpha"), lwd = 2) +
  geom_line(aes(y = StEst, color = "emvAlpha"), lwd = 1, lty = 4) +
  scale_color_manual(
    values = c("alpha" = "black", "emvAlpha" = "red"),
    labels = c(expression(alpha), expression(hat(alpha)))
  ) +
  labs(
    x = "Tempo",
    y = "Probabilidade de Sobrevivência",
    color = "Parâmetro"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "right",
    plot.caption = element_text(hjust = 0.5, size = 10)
  )
```

#### Distribuição Weibull

Para a distribuição Weibull, apresentada na @sec-DistWeibull, não há uma forma analítica para as estimativas de máxima verossimilhança dos parâmetros $\gamma$ (forma) e $\alpha$ (escala). Assim, a obtenção dessas estimativas depende de métodos numéricos, sendo o **Método Iterativo de Newton-Raphson** uma abordagem amplamente utilizada.

O Método de Newton-Raphson é um procedimento iterativo eficiente para resolver equações não lineares, muito empregado na estimação de parâmetros estatísticos. No ajuste de distribuições, como a Weibull no contexto de análise de sobrevivência, o método busca maximizar a função de verossimilhança resolvendo o sistema de equações derivado das condições de otimalidade (gradiente nulo).

A fórmula iterativa é:

$$
\theta_{n+1} = \theta_{n} - \mathbf{H}^{-1}(\theta_{n}) \nabla L(\theta_{n}),
$$

onde:

- $\theta_{n}$ é o vetor de parâmetros estimados na iteração $n$;
- $L(\theta)$ é a função log-verossimilhança;
- $\nabla L(\theta)$ é o vetor gradiente, contendo as derivadas parciais de $L(\theta)$ em relação aos parâmetros;
- $\mathbf{H}(\theta)$ é a matriz Hessiana, composta pelas segundas derivadas de $L(\theta)$.

**Vantagens no ajuste de distribuições:**

- **Eficiência**: O método apresenta convergência rápida quando o ponto inicial $\theta_{0}$ está próximo dos valores reais dos parâmetros.
- **Flexibilidade**: Pode ser aplicado a diversos modelos probabilísticos, incluindo a Weibull, que é amplamente utilizada para modelar tempos de vida e dados de sobrevivência.

**Cuidados na aplicação:**

-   **Convergência**: A convergência do método não é garantida caso o ponto inicial esteja muito distante da solução ou se as condições de regularidade do modelo não forem atendidas.
-   **Cálculo da Hessiana**: O cálculo da matriz Hessiana pode ser computacionalmente custoso, especialmente em distribuições com maior complexidade.

No caso da distribuição Weibull, a aplicação do método Newton-Raphson requer o cálculo das derivadas em relação aos parâmetros $\gamma$ e $\alpha$, permitindo ajustar o modelo aos dados observados de tempos de sobrevivência de forma precisa e eficiente.

O Método Iterativo de Newton-Raphson pode ser implementado de duas formas principais:

1. **Construção Algorítmica Manual:** Consiste na definição e cálculo explícito das funções necessárias, como a função de verossimilhança, o gradiente e a Hessiana.
2. **Uso da Função `optim` no R:** Esta função automatiza o processo de otimização e oferece uma implementação flexível e eficiente.

Para um melhor entendimento do Método Iterativo de Newton-Raphson veja o Apêndice (D) do livro *Análise de Sobrevivência Aplicada* de @colosimo2006analise.

A seguir, será apresentada a construção do algoritmo passo a passo. Começa-se definindo a função de verossimilhança para a distribuição Weibull, que pode ser obtida a partir da @eq-verossilGeneric substituindo a função densidade e a função de sobrevivência específicas da distribuição Weibull. Assim:

```{=latex}
\begin{align*}
    L (\gamma, \alpha) & = \prod_{i = 1}^{n} \left[ \dfrac{\gamma}{\alpha^{\gamma}} t_{i}^{\gamma - 1} \exp \left\{ - \left(\dfrac{t_{i}}{\alpha}\right)^{\gamma} \right\} \right]^{\delta_{i}} \left[ \exp \left\{ - \left(\dfrac{t_{i}}{\alpha}\right)^{\gamma} \right\} \right]^{1 - \delta_{i}} \\
    & = \prod_{i = 1}^{n} \left[ \dfrac{\gamma}{\alpha^{\gamma}} t_{i}^{\gamma - 1} \right]^{\delta_{i}}  \exp \left\{ - \left(\dfrac{t_{i}}{\alpha}\right)^{\gamma} \right\}
\end{align*}
```

Toma-se o logaritmo de $L(\gamma, \alpha)$, logo:

```{=latex}
\begin{align*}
    \ln[L(\gamma, \alpha)] & = \sum_{i = 1}^{n} \delta_{i} \ln[\gamma] - \sum_{i = 1}^{n} \delta_{i} \gamma \ln[\alpha] + \sum_{i = 1}^{n} \delta_{i} (\gamma - 1) \ln[t_{i}] + \sum_{i = 1}^{n} - (\alpha^{-1} t_{i})^{\gamma} \\
    & = \ln[\gamma] \sum_{i = 1}^{n} \delta_{i} - \gamma \ln[\alpha] \sum_{i = 1}^{n} \delta_{i} + (\gamma - 1) \sum_{i = 1}^{n} \delta_{i} \ln[t_{i}] + \sum_{i = 1}^{n} - (\alpha^{-1} t_{i})^{\gamma}
\end{align*}
```

Agora, aplica-se as derivadas de primeira ordem em relação a $\gamma$ e $\alpha$.

$$
\dfrac{\partial \ln[L(\gamma, \alpha)]}{\partial \gamma} = \dfrac{1}{\gamma} \sum_{i = 1}^{n} \delta_{i} - \ln[\alpha] \sum_{i = 1}^{n} \delta_{i} + \sum_{i = 1}^{n} \delta_{i} \ln[t_{i}] - \sum_{i = 1}^{n} (\alpha^{-1} t_{i})^{\gamma} \ln[\alpha^{-1} t_{i}]
$$

$$
\dfrac{\partial \ln[L (\gamma, \alpha)]}{\partial \alpha} = - \dfrac{\gamma}{\alpha} \sum_{i = 1}^{n} \delta_{i} + \gamma \alpha^{-\gamma - 1} \sum_{i = 1}^{n} t_{i}^{\gamma}
$$

Toma-se agora as derivadas de segunda ordem.

$$
\dfrac{\partial^{2} \ln[L (\gamma, \alpha)]}{\partial \gamma^{2}} =  - \dfrac{1}{\gamma^{2}} \sum_{i = 1}^{n} \delta_{i} - \sum_{i = 1}^{n} (\alpha^{-1} t_{i})^{\gamma} (\ln[\alpha^{-1} t_{i}])^{2}
$$

$$
\dfrac{\partial^{2} \ln [L(\gamma, \alpha)]}{\partial \alpha^{2}} = - \dfrac{\gamma}{\alpha^{2}} \sum_{i = 1}^{n} \delta_{i} - \gamma (\gamma + 1) \alpha^{-\gamma - 2} \sum_{i = 1}^{n} t_{i}^{\gamma}
$$

$$
\dfrac{\partial^{2} \ln[L(\gamma, \alpha)]}{\partial \gamma \partial \alpha} = - \dfrac{1}{\alpha} \sum_{i = 1}^{n} \delta_{i} + \alpha^{- \gamma - 1} \sum_{i = 1}^{n} t_{i}^{\gamma} \left( \gamma \ln\left[ \dfrac{t_{i}}{\alpha} \right] + 1 \right)
$$

```{r message=FALSE, warning=FALSE}
# ----------------------
# Configurações Iniciais
# ----------------------

# Ativação de Pacotes
library(knitr)
library(ggplot2)

# Semente
set.seed(123456789)

# Tamanho Amostral
n <- 1000

# --------------------
# Distribuição Weibull
# --------------------
# -------------------
# Simulação dos Dados
# -------------------

w_shape <- 2   # Parâmetro de Forma
w_scale <- 1.5 # Parâmetro de Escala

# Simulação
w_dados <- rweibull(n, shape = w_shape, scale = w_scale)
```

Com todas as derivadas definidas, é possível definirmos algumas funções e variáveis que iremos precisar para utilizar o algoritmo de Newton-Raphson. O bloco de código abaixo contém o algoritmo de Newton-Raphson.

```{r message=FALSE, warning=FALSE}
# -----------------
# [1] Algoritmo
# -----------------
# ---------------------
# [1.1] Vetor Gradiente
# ---------------------
GRADIEN <- function(times, theta) {
  # Número de observações
  n <- length(times)
  
  # Distição dos parâmetros
  gamma <- theta[1] # Parâmetro de forma
  alpha <- theta[2] # Parâmetro de escala
  
  # Mudando o nome p/ facilitar a escrita
  t <- times
  
  # Derivadas Parciais
  DerivGamma <- n/gamma - log(alpha)*n + sum(log(t)) - sum(((t/alpha)^gamma)*log(t/alpha))
  DerivAlpha <- -(gamma/alpha)*n + gamma*(alpha^(-gamma-1))*sum(t^gamma)
  
  # Vetor Gradiente
  gradient <- c(DerivGamma, DerivAlpha)
    
  # Retornar
  return(gradient)
}

# ---------------------
# [1.2] Matriz Hessiana
# ---------------------
HESSIAN <- function(times, theta) {
  # Número de observações
  n <- length(times)
  
  # Distição dos parâmetros
  gamma <- theta[1] # Parâmetro de forma
  alpha <- theta[2] # Parâmetro de escala
  
  # Mudando o nome p/ facilitar a escrita
  t <- times
  
  # Derivadas de 2ª ordem
  D2Gamma <- - n/gamma^2 - sum(((t/alpha)^gamma)*(log(t/alpha)^2))
  D2Alpha <- - (gamma/alpha^2)*n - gamma*(gamma + 1)*(alpha^(-gamma-2))*sum(t^gamma)
  D2 <- -n*alpha + (alpha^(-gamma-1))*sum((t^gamma)*(gamma*log(t/alpha) + 1))
    
  # Matriz Hessiana
  H <- matrix(
    data = c(D2Gamma, D2, D2, D2Alpha),
    nrow = 2, ncol = 2
  )
  
  # Retornar
  return(H)
}

# ----------------------------------------
# [1.3] Método Iterativo de Newton-Raphson
# ----------------------------------------
theta0 <- c(1, 1)     # Chute Inicial
diff <- 1             # Diferença entre o passo atual e o passo anterior
error <- 10^(-8)      # Erro tolerável
id <- 1               # Contador da iteração

# Iteração
while (diff > error) {
  # Vetor Gradiente e Matriz Hessiana
  U <- GRADIEN(times = w_dados, theta = theta0) # Vetor Escore
  H <- HESSIAN(times = w_dados, theta = theta0) # Matriz Hessiana
  
  # Solução do sistema linear H %*% solution = U
  solution <- solve(H, U)
  
  # Atualização do Algoritmo
  theta1 <- theta0 - solution
  
  # Diferença entre os parâmetros
  diff <- max(abs(theta1 - theta0))
  
  # Imprimir resultados na tela
  #cat("Iteração:", id, " -  Estimativa = (Forma:", theta1[1], ", Escala:", theta1[2], ") \n")
  
  # Controle do Algoritmo
  theta0 <- theta1
  id <- id + 1
}

# Impressão de resultados
cat("Número de Iterações Necessárias:", id, "\n")
cat("Estimativa para o parâmetro de forma:", theta1[1], "\n")
cat("Estimativa para o parâmetro de forma:", theta1[2], "\n")
```

O bloco abaixo mostra o uso da função `optim` para otimização.

```{r message=FALSE, warning=FALSE}
# ------------------
# [2] Função `optim`
# ------------------
# ---------------------------
# [2] Função a ser maximizada
# ---------------------------
# Definindo Função Log-verossimilhança
logVerossimil <- function(times, theta) {
  # Número de observações
  n <- length(times)
  
  # Distição dos parâmetros
  gamma <- theta[1] # Parâmetro de forma
  alpha <- theta[2] # Parâmetro de escala
  
  # Mudando o nome p/ facilitar a escrita
  t <- times
  
  # Função Log-verossimilhança
  flv <- log(gamma)*n - gamma*log(alpha)*n + (gamma - 1)*sum(log(t)) - sum((t/alpha)^gamma)
  
  # Retorna o valor simétrico
  return(-flv)
}

# ----------------------------------------
# [2.2] Método Iterativo de Newton-Raphson
# ----------------------------------------
# Vetor de Parâmetros: Chute inicial
theta0 <- c(1, 1)

# Obtendo as estimativas
estimate <- optim(
  par = theta0,
  fn = logVerossimil,
  method = "BFGS",
  hessian = TRUE,
  times = w_dados
)

# Impressão de resultados
cat("O método convergiu?", estimate$convergence==0, "\n")
cat("Estimativa para o parâmetro de forma:", estimate$par[1], "\n")
cat("Estimativa para o parâmetro de escala:", estimate$par[2], "\n")
```

Assim como na distribuição exponencial, será feita uma comparação entre o real e estimado. Veja a @tbl-EMVweibullSt que mostra as dez primeiras observações e suas respectivas funções de sobrevivência, sobrevivência real e sobrevivência estimada.

```{r, message=FALSE, warning=FALSE}
#| tbl-cap: "Real e Estimado para as Funções de Sobrevivência da Distribuição Weibull"
#| label: tbl-EMVweibullSt
#| tbl-cap-location: top

# Função de Sobrevivência
StWei <- function(t, gamma, alpha) exp(-(t/alpha)^gamma)

# Data Frame
dfWeibull <- data.frame(
  Tempo = sort(w_dados),
  St = StWei(sort(w_dados), w_shape, w_scale),
  StEst = StWei(sort(w_dados), estimate$par[1], estimate$par[2])
)

knitr::kable(
  round(head(dfWeibull, 10), 4),
  col.names = c("Tempo", "$S(t)$", "$\\hat{S}(t)$"),
  escape = FALSE,
  align = 'c',
  booktabs = TRUE
)
```

Temos também a comparação dessas duas curvas de sobrevivência, ilustradas na @fig-CompEMVWeibull.

```{r, warning=FALSE}
#| fig-cap: "Comparação do verdadeiro valor dos parâmetros γ e α com suas estimativas de máxima verossimilhança."
#| label: fig-CompEMVWeibull
#| fig-cap-location: top



ggplot(dfWeibull, aes(x = Tempo)) +
  geom_line(aes(y = St, color = "Verdadeiro"), lwd = 2) +
  geom_line(aes(y = StEst, color = "EMV"), lwd = 1, lty = 4) +
  scale_color_manual(
    values = c("Verdadeiro" = "black", "EMV" = "red"),
    labels = c(
      "Verdadeiro" = expression(paste("Verdadeiro: ", gamma, ", ", alpha)),
      "EMV" = expression(paste("EMV: ", hat(gamma), ", ", hat(alpha)))
    )) +
  labs(
    x = "Tempo",
    y = expression(S(t)), 
    color = "Parâmetros") + 
  theme_minimal()
```

#### Distribuição Log-normal




:::: progress
:::: {.progress-bar style="width: 100%;"}
::::
::::