---
title: "Modelos AFT"
author: "Breno C R Silva"
format: html
lang: pt
---

# Modelos de Tempo de Vida Acelerados

## Introdução

[...]

Tem-se a função de sobrevivência em modelos AFT com mudança no argumento, pois o efeito das covariáveis no tempo de sobrevivência pode acelerar ou retardar o mesmo. Assim,

$$
S (t | x) = P (T > t / \exp\{ \mathbf{x'} \boldsymbol{\beta}\}).
$$

A função de risco, desta forma, também precisar ser ajustada. Um caso geral para a função de risco em modelos AFT pode ser expresso como:

$$
\lambda(t | \mathbf{x}) = \lambda_{0}(t) g(\mathbf{x}),
$$

onde $\lambda_{0}(t)$ é a função de risco basal para uma determinada distribuição e $g(\mathbf{x}) = \exp\{ - \mathbf{x'} \boldsymbol{\beta} \}$ entra como a função que mensura o efeito das covariáveis.

## Distribuição Exponencial

Em modelos AFT a função de sobrevivência é expressa por:

$$
S (t | x) = \exp \left\{- \alpha \left( \dfrac{t}{\exp\{ \mathbf{x'} \boldsymbol{\beta} \}} \right) \right\}.
$$ {#eq-AFTexpSt}

Com função de risco dada por

$$
\lambda(t | \mathbf{x}) = \alpha \exp\{ - \mathbf{x'} \boldsymbol{\beta} \},
$$ {#eq-AFTexpht}

## Distribuição Weibull

Para modelos AFT, baseados na distribuição Weibull, a função de sobrevivência é dada por

$$
S (t | x) = \exp \left\{ - \left( \dfrac{t}{\alpha \exp\{ - \mathbf{x'} \boldsymbol{\beta} \} } \right)^{\gamma} \right\}.
$$ {#eq-AFTweibSt}

Assim, pode-se escrever a função de risco da distribuição Weibull como

$$
\lambda(t | \mathbf{x}) = \dfrac{ \gamma }{ \alpha^{\gamma} } t^{\gamma - 1} \exp\{ - \mathbf{x'} \boldsymbol{\beta} \}
$$ {#eq-AFTeeibht}

## Estimação de Parâmetros

Assim como no capítulo anterior, será usado o método de máxima verossimilhança. Relebrando que a função de verossimilhança é dada na forma

$$
\begin{align*}
L(\theta) & = \prod_{i = 1}^{n} \left[f(t_{i} | \mathbf{x}) \right]^{\delta_{i}} \left[S(t_{i} | \mathbf{x}) \right]^{1 - \delta_{i}} \\
          & = \prod_{i = 1}^{n} \left[\lambda(t_{i} | \mathbf{x}) \right]^{\delta_{i}} S(t_{i} | \mathbf{x}).
\end{align*}
$$

Assim, o parâmetro ou o vetor de parâmetros que maximizar $\ln[ L(\theta) ]$, isto é, maximizar $L(\theta)$, é a melhor estimativa para a amostra observada.

## Implementação Computacional

### Distribuição Exponencial

#### Geração dos Dados

- **Funções de Geração:**

```{r}
# Função de simulação dos dados
times.exp <- function(val.unif, alpha.par, x.cov, beta.par) {
  # Combinação linear dos preditores lineares
  effect <- x.cov %*% beta.par
  
  # Tempos de sobrevivência
  t <- - log(1 - val.unif) * exp(effect) / alpha.par
  
  return(t)
}

SD.AFT.EXP <- function(n.size, alpha.par, x.cov, beta.par) {
  u <- runif(n.size)
  t <- rep(0, n.size)       # Tempos de Falha
  c <- rep(0, n.size)       # Tempos de Censura
  times <- rep(0, n.size)   # Tempo Observado
  
  # Interação
  for (i in 1:n.size){
    t[i] <- times.exp(val.unif=u[i], alpha.par=alpha.par, x.cov=x.cov[i, ], beta.par=beta.par)
    c[i] <- rexp(1, rate = alpha.par)
    times[i] <- min(t[i],c[i])
  }
  
  # Conjunto de dados
  delta <- ifelse(t <= c, 1, 0) 
  dados <- data.frame(times, delta, x.cov)
  
  return(dados)
}
```

- **Simulação dos dados:**

```{r}
set.seed(123456789)

# Tamanho da amostra e número de variáveis
n <- 1000

# Parâmetro da distribuição exponencial
taxa <- 2

# Matriz Design
x1 <- rbinom(n = n, size = 1, prob=0.5)
x2 <- rnorm(n=n)
X <- cbind(1, x1, x2)

# Vetor de Coeficientes Betas
betas <- c(0.5, -0.5, 0.5)

# Simulando o Tempo de Sobrevivência
dados <- SD.AFT.EXP(n.size = n, alpha.par = taxa, beta.par = betas, x.cov = X)

# Proporção de Falhas
prop <- mean(dados$delta)*100
```

Veja a @tbl-SIMULexpAFT que apresenta as dez primeiras observações simuladas.

```{r message=FALSE, warning=FALSE}
#| tbl-cap: "Dez primeiras observações simuladas."
#| label: tbl-SIMULexpAFT
#| tbl-cap-location: top

library(knitr)

kable(
  round(head(dados, 10), 4),
  col.names = c("Tempo", "Delta", "Constante", "X1 ~ Bern(0,5)", "X2 ~ Normal(0, 1)"),
  escape = FALSE,
  align = "c",
  booktabs = TRUE
)
```

A proporção de censura nos dados foi: `r prop`%.

#### Ajuste do modelo ATF usando o pacote `survival`:

```{r}
require(survival)
ajust <- survreg(Surv(times, delta)~x1+x2, dist = "exponential", data=dados)
summary(ajust)
```

### Usando a função `optim`

- **Implementando a função log-verossimilhança:**

```{r}
StAFTexp <- function(t, alpha.par, x.cov=x.cov, beta.par) {
  # Combinação linear dos preditores lineares
  effect <- x.cov %*% beta.par
  St <- 1 - pexp(q = t/exp(effect), rate = alpha.par)
  return(St)
}

htAFTexp <- function(t, alpha.par, x.cov=x.cov, beta.par) {
  # Combinação linear dos preditores lineares
  effect <- x.cov %*% beta.par
  ht <- alpha.par / exp(effect)
}

loglikelihood <- function(par, data.times, ind.cens, x.cov) {
  npar <- length(par)
  alpha <- par[1]
  betas <- par[2:npar]
  
  St <- StAFTexp(t=data.times, alpha.par=alpha, beta.par=betas, x.cov=x.cov)
  ht <- htAFTexp(t=data.times, alpha.par=alpha, beta.par=betas, x.cov=x.cov)
  
  flv <- sum(ind.cens*log(ht) + log(St))
  return(-flv)
}
```

- **Maximizando:**

```{r, warning=FALSE}
init <- rep(0.1, 4)

X <- as.matrix(dados[, 3:ncol(dados)])

fit <- optim(par=init, fn = loglikelihood, 
             gr = NULL, method = "BFGS", hessian = TRUE, 
             data.times=dados$times, ind.cens=dados$delta, x.cov=X)
fit
```

### Distribuição Weibull

#### Geração dos Dados

- **Funções de Geração:**

```{r}
# Função de simulação dos dados
times.weib <- function(val.unif, gamma.par, alpha.par, x.cov, beta.par) {
  # Combinação linear dos preditores lineares
  effect <- x.cov %*% beta.par
  
  # Tempos de sobrevivência
  t <- alpha.par * (-log(1 - val.unif))^(1/gamma.par) * exp(effect)
  
  return(t)
}

SD.AFT.WEIB <- function(n.size, gamma.par, alpha.par, x.cov, beta.par) {
  u <- runif(n.size)
  t <- rep(0, n.size)       # Tempos de Falha
  c <- rep(0, n.size)       # Tempos de Censura
  times <- rep(0, n.size)   # Tempo Observado
  
  # Interação
  for (i in 1:n.size){
    t[i] <- times.weib(val.unif=u[i], gamma.par=gamma.par, alpha.par=alpha.par, 
                       x.cov=x.cov[i, ], beta.par=beta.par)
    c[i] <- rexp(1, rate = alpha.par)
    times[i] <- min(t[i],c[i])
  }
  
  # Conjunto de dados
  delta <- ifelse(t <= c, 1, 0) 
  dados <- data.frame(times, delta, x.cov)
  
  return(dados)
}
```

- **Simulação dos dados:**

```{r}
set.seed(123456789)

# Tamanho da amostra e número de variáveis
n <- 1000

# Parâmetro da distribuição Weibull
shape <- 2
scale <- 1.5

# Matriz Design
x1 <- rbinom(n = n, size = 1, prob=0.5)
x2 <- rnorm(n=n)
X <- cbind(1, x1, x2)

# Vetor de Coeficientes Betas
betas <- c(0.5, -0.5, 0.5)

# Simulando o Tempo de Sobrevivência
dados <- SD.AFT.WEIB(n.size = n, gamma.par = shape, alpha.par = scale, x.cov = X, beta.par = betas)

# Proporção de Falhas
prop <- mean(dados$delta)*100
```

Veja a @tbl-SIMULweibAFT que apresenta as dez primeiras observações simuladas.

```{r message=FALSE, warning=FALSE}
#| tbl-cap: "Dez primeiras observações simuladas."
#| label: tbl-SIMULweibAFT
#| tbl-cap-location: top

library(knitr)

kable(
  round(head(dados, 10), 4),
  col.names = c("Tempo", "Delta", "Constante", "X1 ~ Bern(0,5)", "X2 ~ Normal(0, 1)"),
  escape = FALSE,
  align = "c",
  booktabs = TRUE
)
```

A proporção de censura nos dados foi: `r prop`%.

#### Ajuste do modelo ATF usando o pacote `survival`:

```{r}
require(survival)
ajust <- survreg(Surv(times, delta)~x1+x2, dist = "weibull", data=dados)
summary(ajust)
```

### Usando a função `optim`

- **Implementando a função log-verossimilhança:**

```{r}
StAFTweib <- function(t, gamma.par=gamma.par, alpha.par=alpha.par, x.cov=x.cov, beta.par=beta.par){
  gx <- as.numeric(exp(x.cov %*% beta.par))
  St <- 1 - pweibull(q = t/gx, shape = gamma.par, scale = alpha.par)
  
  return(St)
}

htAFTweib <- function(t, gamma.par=gamma.par, alpha.par=alpha.par, x.cov=x.cov, beta.par=beta.par){
  gx <- as.numeric(exp(x.cov %*% beta.par))
  f0 <- dweibull(x=t/gx, shape=gamma.par, scale=alpha.par)
  S0 <- 1 - pweibull(q=t/gx, shape=gamma.par, scale=alpha.par)
  h0 <- f0 / S0
  ht <- h0 / exp(x.cov %*% beta.par)
  
  return(ht)
}

loglikelihood <- function(par, data.times, ind.cens, x.cov){
  npar <- length(par)
  gamma <- par[1]
  alpha <- par[2]
  betas <- par[3:npar]
  
  St <- StAFTweib(t=data.times, gamma.par=gamma, alpha.par=alpha, x.cov=x.cov, beta.par=betas)
  ht <- htAFTweib(t=data.times, gamma.par=gamma, alpha.par=alpha, x.cov=x.cov, beta.par=betas)
  
  flv <- sum(ind.cens*log(ht) + log(St))
  return(-flv)
}
```

- **Maximizando:**

```{r, warning=FALSE}
init <- rep(0.1, 5)

X <- as.matrix(dados[, 3:ncol(dados)])

fit <- optim(par=init, fn = loglikelihood, 
             gr = NULL, method = "BFGS", hessian = TRUE, 
             data.times=dados$times, ind.cens=dados$delta, x.cov=X)
fit
```

