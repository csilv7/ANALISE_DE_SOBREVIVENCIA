#| fig-cap-location: top
library(ggplot2)
alp <- 1
t <- rexp(n, alp)
fSt <- St(t, alp)
ggplot(data = fSt, aes(x = t, y = St)) +
geom_line(color="red") +
labs(x = "t", y = "S(t)") +
theme_minimal()
#| fig-cap: ""
#| label: fig-
#| fig-cap-location: top
library(ggplot2)
alp <- 1
t <- rexp(n, alp)
fSt <- St(t, alp)
g1 <- ggplot(data = fSt, aes(x = t, y = St)) +
geom_line(color="red") +
labs(x = "t", y = "S(t)") +
theme_minimal()
alp <- 1.5
t <- rexp(n, alp)
fSt <- St(t, alp)
g2 <- ggplot(data = fSt, aes(x = t, y = St)) +
geom_line(color="red") +
labs(x = "t", y = "S(t)") +
theme_minimal()
g1 + g2
#| fig-cap: ""
#| label: fig-
#| fig-cap-location: top
library(ggplot2)
alp <- 1
t <- rexp(n, alp)
fSt <- St(t, alp)
alp <- 1.5
t <- rexp(n, alp)
fSt1 <- St(t, alp)
ggplot(data = fSt, aes(x = t, y = St)) +
geom_line(color="red") +
geom_line(data = fSt1, aes(x = t, y = St), color = "blue")
labs(x = "t", y = "S(t)") +
theme_minimal()
tempo <- rexp(n, 1)
fSt1 <- St(t = tempo, alpha = 1)
fSt2 <- St(t = tempo, alpha = 1.5)
fSt3 <- St(t = tempo, alpha = 2)
ggplot(aes(x = tempo, y = fst1$St)) +
geom_line()
library(ggplot2)
tempo <- rexp(n, 1)
fSt1 <- St(t = tempo, alpha = 1)
fSt2 <- St(t = tempo, alpha = 1.5)
fSt3 <- St(t = tempo, alpha = 2)
ggplot(aes(x = tempo, y = fst1$St)) +
geom_line()
# Função de Sobrevivência
St <- function(t, alpha) {
df <- data.frame(t = t, St = exp(- alpha * t))
return(df)
}
# Função de Risco (constante)
ht <- function(alpha) {
return(alpha)
}
# Função de Risco Acumulado
Lt <- function(t, alpha) {
df <- data.frame(t = t, Risco_Acumul = alpha * t)
return(df)
}
# Definindo semente para reprodutibilidade
set.seed(123)
# Definindo o tamanho da amostra
n <- 1000
#| fig-cap: ""
#| label: fig-
#| fig-cap-location: top
library(ggplot2)
tempo <- rexp(n, 1)
fSt1 <- St(t = tempo, alpha = 1)
fSt2 <- St(t = tempo, alpha = 1.5)
fSt3 <- St(t = tempo, alpha = 2)
ggplot(aes(x = tempo, y = fst1$St)) +
geom_line()
# Função de Sobrevivência
St <- function(t, alpha) {
return(exp(- alpha * t))
}
# Função de Risco (constante)
ht <- function(alpha) {
return(alpha * t^0)
}
# Função de Risco Acumulado
Lt <- function(t, alpha) {
return(alpha * t)
}
# Definindo semente para reprodutibilidade
set.seed(123)
# Definindo o tamanho da amostra
n <- 1000
library(ggplot2)
tempo <- rexp(n, 1)
fSt1 <- St(t = tempo, alpha = 1)
fSt2 <- St(t = tempo, alpha = 1.5)
fSt3 <- St(t = tempo, alpha = 2)
ggplot(aes(x = tempo, y = fst1)) +
geom_line()
library(ggplot2)
tempo <- rexp(n, 1)
fSt1 <- St(t = tempo, alpha = 1)
fSt2 <- St(t = tempo, alpha = 1.5)
fSt3 <- St(t = tempo, alpha = 2)
ggplot() +
geom_line(aes(x = tempo, y = fst1)) +
geom_line(aes(x = tempo, y = fst2)) +
geom_line(aes(x = tempo, y = fst3)) +
labs(x = "t", y = "S(t)") +
theme_minimal()
#| fig-cap: "Funções de Sobrevivências para diferentes valores de alpha."
#| label: fig-SobrExp
#| fig-cap-location: top
library(ggplot2)
tempo <- rexp(n, 1)
fSt1 <- St(t = tempo, alpha = 1)
fSt2 <- St(t = tempo, alpha = 1.5)
fSt3 <- St(t = tempo, alpha = 2)
ggplot() +
geom_line(aes(x = tempo, y = fst1)) +
geom_line(aes(x = tempo, y = fst2)) +
geom_line(aes(x = tempo, y = fst3)) +
labs(x = "t", y = "S(t)") +
theme_minimal()
# -----------------------
# [1] ATIVAÇÃO DE PACOTES
# -----------------------
library(ggplot2)
library(survival)
# Função de Sobrevivência (Exponencial)
St <- function(t, alpha) {
exp(-alpha * t)
}
# Função de Risco (Constante - para simplificar)
ht <- function(alpha) {
alpha
}
# Função de Risco Acumulado (Constante)
Lt <- function(t, alpha) {
alpha * t
}
# Simulando dados de sobrevivência (exponencial)
set.seed(123)
n <- 1000
tempo <- rexp(n, rate = 1)  # 'rate' é o parâmetro da distribuição exponencial
# Calculando a função de sobrevivência para diferentes valores de alpha
fSt1 <- St(t = tempo, alpha = 1)
fSt2 <- St(t = tempo, alpha = 1.5)
fSt3 <- St(t = tempo, alpha = 2)
# Plotando as curvas de sobrevivência
ggplot() +
geom_line(aes(x = tempo, y = fSt1, color = "alpha = 1")) +
geom_line(aes(x = tempo, y = fSt2, color = "alpha = 1.5")) +
geom_line(aes(x = tempo, y = fSt3, color = "alpha = 2")) +
labs(x = "Tempo", y = "S(t)", color = "Valor de alpha") +
theme_minimal()
ggplot() +
geom_line(aes(x = tempo, y = fSt1, color = expression(paste(alpha, " = ", 1)))) +
geom_line(aes(x = tempo, y = fSt2, color = "alpha = 1.5")) +
geom_line(aes(x = tempo, y = fSt3, color = "alpha = 2")) +
labs(x = "Tempo", y = "S(t)", color = "Valor de alpha") +
theme_minimal()
# Plotando as curvas de sobrevivência
ggplot() +
geom_line(aes(x = tempo, y = fSt1, color = expression(paste(alpha, " = 1")))) +
geom_line(aes(x = tempo, y = fSt2, color = "alpha = 1.5")) +
geom_line(aes(x = tempo, y = fSt3, color = "alpha = 2")) +
labs(x = "Tempo", y = "S(t)", color = "Valor de alpha") +
theme_minimal()
library(ggplot2)
# Função de Sobrevivência (Exponencial)
St <- function(t, alpha) {
exp(-alpha * t)
}
# Função de Risco (Constante - para simplificar)
ht <- function(alpha) {
alpha
}
# Função de Risco Acumulado (Constante)
Lt <- function(t, alpha) {
alpha * t
}
# Simulando dados de sobrevivência (exponencial)
set.seed(123)
n <- 1000
tempo <- rexp(n, rate = 1)  # 'rate' é o parâmetro da distribuição exponencial
# Criando um data frame para facilitar o plot
dados <- data.frame(
tempo = rep(tempo, 3),
St = c(St(tempo, alpha = 1), St(tempo, alpha = 1.5), St(tempo, alpha = 2)),
alpha = factor(rep(c("alpha = 1", "alpha = 1.5", "alpha = 2"), each = n))
)
library(ggplot2)
# Função de Sobrevivência (Exponencial)
St <- function(t, alpha) {
exp(-alpha * t)
}
# Função de Risco (Constante - para simplificar)
ht <- function(alpha) {
alpha
}
# Função de Risco Acumulado (Constante)
Lt <- function(t, alpha) {
alpha * t
}
# Simulando dados de sobrevivência (exponencial)
set.seed(123)
n <- 1000
tempo <- rexp(n, rate = 1)  # 'rate' é o parâmetro da distribuição exponencial
# Criando um data frame para facilitar o plot
dados <- data.frame(
tempo = rep(tempo, 3),
St = c(St(tempo, alpha = 1), St(tempo, alpha = 1.5), St(tempo, alpha = 2)),
alpha = factor(rep(c("alpha = 1", "alpha = 1.5", "alpha = 2"), each = n))
)
View(dados)
# Plotando as curvas de sobrevivência
ggplot(dados, aes(x = tempo, y = St, color = alpha)) +
geom_line(stat = "summary", fun = mean, size = 1) +  # Média para suavizar
labs(x = "Tempo", y = "S(t)", color = "Valor de alpha") +
theme_minimal()
# Simulando dados de sobrevivência (exponencial)
set.seed(123)
n <- 1000
tempo <- rexp(n, rate = 1)
# Criando um data frame com valores de S(t) para diferentes alphas
dados <- data.frame(
tempo = rep(tempo, 3),
St = c(St(tempo, alpha = 1), St(tempo, alpha = 1.5), St(tempo, alpha = 2)),
alpha = factor(rep(c(1, 1.5, 2), each = n))
)
# Plotando as curvas de sobrevivência com LaTeX nas legendas
ggplot(dados, aes(x = tempo, y = St, color = alpha)) +
geom_line(stat = "summary", fun = mean, size = 1) +
labs(
x = "Tempo",
y = "S(t)",
color = expression(alpha)
) +
scale_color_manual(
values = c("red", "blue", "green"),
labels = c(expression(alpha == 1), expression(alpha == 1.5), expression(alpha == 2))) +
theme_minimal()
#| fig-cap: "Funções de Sobrevivências para diferentes valores de alpha."
#| label: fig-SobrExp
#| fig-cap-location: top
library(ggplot2)
# Simulando dados de sobrevivência (exponencial)
set.seed(123)
n <- 1000
tempo <- rexp(n, rate = 1)
# Criando um data frame com valores de S(t) para diferentes alphas
dados <- data.frame(
tempo = rep(tempo, 3),
St = c(St(tempo, alpha = 1), St(tempo, alpha = 1.5), St(tempo, alpha = 2)),
alpha = factor(rep(c(1, 1.5, 2), each = n))
)
# Plotando as curvas de sobrevivência com LaTeX nas legendas
ggplot(dados, aes(x = tempo, y = St, color = alpha)) +
geom_line(stat = "summary", fun = mean, size = 1) +
labs(x = "Tempo", y = "S(t)",
color = expression(alpha)) +
scale_color_manual(
values = c("red", "blue", "green"),
labels = c(expression(alpha == 1), expression(alpha == 1.5), expression(alpha == 2))) +
theme_minimal()
#| fig-cap: "Funções de Sobrevivências para diferentes valores de `{r} expression(alpha)`"
#| label: fig-SobrExp
#| fig-cap-location: top
library(ggplot2)
# Simulando dados de sobrevivência (exponencial)
set.seed(123)
n <- 1000
tempo <- rexp(n, rate = 1)
# Criando um data frame com valores de S(t) para diferentes alphas
dados <- data.frame(
tempo = rep(tempo, 3),
St = c(St(tempo, alpha = 1), St(tempo, alpha = 1.5), St(tempo, alpha = 2)),
alpha = factor(rep(c(1, 1.5, 2), each = n))
)
# Plotando as curvas de sobrevivência com LaTeX nas legendas
ggplot(dados, aes(x = tempo, y = St, color = alpha)) +
geom_line(stat = "summary", fun = mean, size = 1) +
labs(x = "Tempo", y = "S(t)",
color = expression(alpha)) +
scale_color_manual(
values = c("red", "blue", "green"),
labels = c(expression(alpha == 1), expression(alpha == 1.5), expression(alpha == 2))) +
theme_minimal()
#| fig-cap: "Funções de Sobrevivências para diferentes valores de α"
#| label: fig-SobrExp
#| fig-cap-location: top
library(ggplot2)
# Simulando dados de sobrevivência (exponencial)
set.seed(123)
n <- 1000
tempo <- rexp(n, rate = 1)
# Criando um data frame com valores de S(t) para diferentes alphas
dados <- data.frame(
tempo = rep(tempo, 3),
ht = c(ht(tempo, alpha = 1), ht(tempo, alpha = 1.5), ht(tempo, alpha = 2)),
alpha = factor(rep(c(1, 1.5, 2), each = n))
)
#| fig-cap: "Funções de Sobrevivências para diferentes valores de α"
#| label: fig-SobrExp
#| fig-cap-location: top
library(ggplot2)
# Simulando dados de sobrevivência (exponencial)
set.seed(123)
n <- 1000
tempo <- rexp(n, rate = 1)
# Criando um data frame com valores de S(t) para diferentes alphas
dados <- data.frame(
tempo = rep(tempo, 3),
ht = c(ht(alpha = 1), ht(alpha = 1.5), ht(alpha = 2)),
alpha = factor(rep(c(1, 1.5, 2), each = n))
)
# Plotando as curvas de sobrevivência com LaTeX nas legendas
ggplot(dados, aes(x = tempo, y = St, color = alpha)) +
geom_line(stat = "summary", fun = mean, size = 1) +
labs(x = "Tempo", y = expression(lambda, "(t)"),
color = expression(alpha)) +
scale_color_manual(
values = c("red", "blue", "green"),
labels = c(expression(alpha == 1), expression(alpha == 1.5), expression(alpha == 2))) +
theme_minimal()
#| fig-cap: "Funções de Sobrevivências para diferentes valores de α"
#| label: fig-SobrExp
#| fig-cap-location: top
library(ggplot2)
# Simulando dados de sobrevivência (exponencial)
set.seed(123)
n <- 1000
tempo <- rexp(n, rate = 1)
# Criando um data frame com valores de S(t) para diferentes alphas
dados <- data.frame(
tempo = rep(tempo, 3),
ht = c(ht(t = tempo, alpha = 1), ht(t = tempo, alpha = 1.5), ht(t = tempo, alpha = 2)),
alpha = factor(rep(c(1, 1.5, 2), each = n))
)
# Função de Sobrevivência
St <- function(t, alpha) {
return(exp(- alpha * t))
}
# Função de Risco (constante)
ht <- function(t, alpha) {
return(alpha * t^0)
}
# Função de Risco Acumulado
Lt <- function(t, alpha) {
return(alpha * t)
}
#| fig-cap: "Funções de Sobrevivências para diferentes valores de α"
#| label: fig-SobrExp
#| fig-cap-location: top
library(ggplot2)
# Simulando dados de sobrevivência (exponencial)
set.seed(123)
n <- 1000
tempo <- rexp(n, rate = 1)
# Criando um data frame com valores de S(t) para diferentes alphas
dados <- data.frame(
tempo = rep(tempo, 3),
ht = c(ht(t = tempo, alpha = 1), ht(t = tempo, alpha = 1.5), ht(t = tempo, alpha = 2)),
alpha = factor(rep(c(1, 1.5, 2), each = n))
)
# Plotando as curvas de sobrevivência com LaTeX nas legendas
ggplot(dados, aes(x = tempo, y = St, color = alpha)) +
geom_line(stat = "summary", fun = mean, size = 1) +
labs(x = "Tempo", y = expression(lambda, "(t)"),
color = expression(alpha)) +
scale_color_manual(
values = c("red", "blue", "green"),
labels = c(expression(alpha == 1), expression(alpha == 1.5), expression(alpha == 2))) +
theme_minimal()
#| fig-cap: "Funções de Sobrevivências para diferentes valores de α"
#| label: fig-SobrExp
#| fig-cap-location: top
library(ggplot2)
# Simulando dados de sobrevivência (exponencial)
set.seed(123)
n <- 1000
tempo <- rexp(n, rate = 1)
# Criando um data frame com valores de S(t) para diferentes alphas
dados <- data.frame(
tempo = rep(tempo, 3),
ht = c(ht(t = tempo, alpha = 1), ht(t = tempo, alpha = 1.5), ht(t = tempo, alpha = 2)),
alpha = factor(rep(c(1, 1.5, 2), each = n))
)
# Plotando as curvas de sobrevivência com LaTeX nas legendas
ggplot(dados, aes(x = tempo, y = ht, color = alpha)) +
geom_line(stat = "summary", fun = mean, size = 1) +
labs(x = "Tempo", y = expression(lambda, "(t)"),
color = expression(alpha)) +
scale_color_manual(
values = c("red", "blue", "green"),
labels = c(expression(alpha == 1), expression(alpha == 1.5), expression(alpha == 2))) +
theme_minimal()
#| fig-cap: "Funções de Sobrevivências para diferentes valores de α"
#| label: fig-SobrExp
#| fig-cap-location: top
library(ggplot2)
# Simulando dados de sobrevivência (exponencial)
set.seed(123)
n <- 1000
tempo <- rexp(n, rate = 1)
# Criando um data frame com valores de S(t) para diferentes alphas
dados <- data.frame(
tempo = rep(tempo, 3),
ht = c(ht(t = tempo, alpha = 1), ht(t = tempo, alpha = 1.5), ht(t = tempo, alpha = 2)),
alpha = factor(rep(c(1, 1.5, 2), each = n))
)
# Plotando as curvas de sobrevivência com LaTeX nas legendas
ggplot(dados, aes(x = tempo, y = ht, color = alpha)) +
geom_line(stat = "summary", fun = mean, size = 1) +
labs(x = "Tempo", y = expression(lambda(t)),
color = expression(alpha)) +
scale_color_manual(
values = c("red", "blue", "green"),
labels = c(expression(alpha == 1), expression(alpha == 1.5), expression(alpha == 2))) +
theme_minimal()
# Função de Sobrevivência
St <- function(t, alpha) {
return(exp(- alpha * t))
}
# Função de Risco (constante)
ht <- function(t, alpha) {
return(alpha * t^0)
}
# Função de Risco Acumulado
Lt <- function(t, alpha) {
return(alpha * t)
}
#| fig-cap: "Funções de Sobrevivências para diferentes valores de α"
#| label: fig-SobrExp
#| fig-cap-location: top
library(ggplot2)
# Simulando dados de sobrevivência (exponencial)
set.seed(123)
n <- 1000
tempo <- rexp(n, rate = 1)
# Criando um data frame com valores de S(t) para diferentes alphas
dados <- data.frame(
tempo = rep(tempo, 3),
St = c(St(tempo, alpha = 1), St(tempo, alpha = 1.5), St(tempo, alpha = 2)),
alpha = factor(rep(c(1, 1.5, 2), each = n))
)
# Plotando as curvas de sobrevivência com LaTeX nas legendas
ggplot(dados, aes(x = tempo, y = St, color = alpha)) +
geom_line(stat = "summary", fun = mean, size = 1) +
labs(x = "Tempo", y = "S(t)",
color = expression(alpha)) +
scale_color_manual(
values = c("red", "blue", "green"),
labels = c(expression(alpha == 1), expression(alpha == 1.5), expression(alpha == 2))) +
theme_minimal()
#| fig-cap: "Funções de Sobrevivências para diferentes valores de α"
#| label: fig-SobrExp
#| fig-cap-location: top
library(ggplot2)
# Simulando dados de sobrevivência (exponencial)
set.seed(123)
n <- 1000
tempo <- rexp(n, rate = 1)
# Criando um data frame com valores de S(t) para diferentes alphas
dados <- data.frame(
tempo = rep(tempo, 3),
ht = c(ht(t = tempo, alpha = 1), ht(t = tempo, alpha = 1.5), ht(t = tempo, alpha = 2)),
alpha = factor(rep(c(1, 1.5, 2), each = n))
)
# Plotando as curvas de sobrevivência com LaTeX nas legendas
ggplot(dados, aes(x = tempo, y = ht, color = alpha)) +
geom_line(stat = "summary", fun = mean, size = 1) +
labs(x = "Tempo", y = expression(lambda(t)),
color = expression(alpha)) +
scale_color_manual(
values = c("red", "blue", "green"),
labels = c(expression(alpha == 1), expression(alpha == 1.5), expression(alpha == 2))) +
theme_minimal()
-0.5/8^(1/2)
5.5/8^(1/2)
#| fig-cap: "Funções de Sobrevivências para diferentes valores de α"
#| label: fig-RiscExp
#| fig-cap-location: top
library(ggplot2)
# Simulando dados de sobrevivência (exponencial)
set.seed(123)
n <- 1000
tempo <- rexp(n, rate = 1)
# Criando um data frame com valores de S(t) para diferentes alphas
dados <- data.frame(
tempo = rep(tempo, 3),
Lt = c(Lt(t = tempo, alpha = 1), Lt(t = tempo, alpha = 1.5), Lt(t = tempo, alpha = 2)),
alpha = factor(rep(c(1, 1.5, 2), each = n))
)
# Plotando as curvas de sobrevivência com LaTeX nas legendas
ggplot(dados, aes(x = tempo, y = Lt, color = alpha)) +
geom_line(stat = "summary", fun = mean, size = 1) +
labs(x = "Tempo", y = expression(Lambda(t)),
color = expression(alpha)) +
scale_color_manual(
values = c("red", "blue", "green"),
labels = c(expression(alpha == 1), expression(alpha == 1.5), expression(alpha == 2))) +
theme_minimal()
