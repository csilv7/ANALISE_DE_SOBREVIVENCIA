::: progress
::: {.progress-bar style="width: 100%;"}
:::
:::

```{r, include=FALSE}
options(OutDec = ",", digits = 4)
```

# Modelos de Tempo de Vida Acelerado

## Introdução

No capítulo anterior, foram apresentados modelos paramétricos para dados de sobrevivência. Entretanto, esses modelos não contemplam a inclusão de covariáveis na análise do tempo de sobrevivência. Neste capítulo, exploraremos esse método.

No modelo de regressão linear clássico, a relação entre a variável resposta $Y$ e as covariáveis $\mathbf{x'}$ é aditiva, ou seja, mudanças nas covariáveis alteram $Y$ de maneira linear. O modelo de regressão linear clássico é expresso como:

$$
Y = \beta_{0} + \beta_{1} X_{1} + \beta_{2} X_{2} + \ldots + \beta_{p} X_{p} + \varepsilon,
$$ {#eq-LinearModel}

onde $\varepsilon$ é a parte estocástica (erro) que segue uma distribuição $Normal(0, \sigma^{2})$.

No entanto, em análise de sobrevivência, essa suposição não se sustenta, pois o efeito das covariáveis geralmente acelera ou retarda o tempo de falha, tornando necessária uma abordagem multiplicativa. Este modelo de regressão é chamado de Modelo de *Tempo de Vida Acelerado* (Accelerated Failure Time - AFT).

No modelo AFT, assume-se que o tempo de falha $T$ é afetado por um fator de aceleração exponencial das covariáveis. Esse fator multiplicativo indica se o tempo até o evento será prolongado ou encurtado. Assim, o modelo é definido como:

$$
T = \exp\{ \mathbf{x'} \boldsymbol{\beta} \} \varepsilon = \exp\{ \beta_{0} + \beta_{1} X_{1} + \beta_{2} X_{2} \ldots + \beta_{p} X_{p} \} \varepsilon,
$$ {#eq-RelationAFT}

onde $\varepsilon$ é um termo de erro multiplicativo que captura a variabilidade não explicada pelas covariáveis. Aplicando a transformação logarítmica em $T$ obtém-se a forma linearizável de @eq-RelationAFT que aproxima-se da @eq-LinearModel, de forma que

$$
\ln[T] = \beta_{0} + \beta_{1} X_{1} + \beta_{2} X_{2} \ldots + \beta_{p} X_{p} + v,
$$

onde $v = \ln[\varepsilon]$ segue uma distribuição de valor extremo. Essa escolha para a distribuição dos erros decorre do fato de que os tempos de sobrevivência frequentemente apresentam forte assimetria à direita. Portanto, os erros não podem ser adequadamente representados por uma distribuição normal, sendo mais apropriado assumir distribuições como Log-normal, Weibull ou Exponencial.

Nos modelos AFT, a função de sobrevivência sofre um ajuste devido ao efeito das covariáveis, que podem acelerar ou retardar o tempo de falha. Assim, a função de sobrevivência condicional às covariáveis é expressa como:

$$
S (t | x) = P (T > t / \exp\{ \mathbf{x'} \boldsymbol{\beta}\}).
$$ {#eq-fSobrAFT}

Como o tempo de falha é ajustado pelo fator de aceleração, a função de risco também precisa ser reformulada para incorporar o efeito das covariáveis. A forma geral da função de risco em modelos AFT é dada por:

$$
\lambda(t | \mathbf{x}) = \lambda_{0}(t) g(\mathbf{x}).
$$ {#eq-fhazardAFT}

Nesta expressão, $\lambda_{0}(t)$, representa a função de risco basal, isto é, representa o risco no tempo $t$ quando todas as covariáveis são iguais a zero, ou seja, na ausência de efeitos das covariáveis. Já o termo $g(\mathbf{x}) = \exp\{ - \mathbf{x'} \boldsymbol{\beta} \}$ age como um fator de ajuste, mensurando o impacto das covariáveis na taxa de falha.

## Modelo Exponencial

Em modelos AFT, a função de sobrevivência à distribuição exponencial é expressa por:

$$
S (t | x) = \exp \left\{- \alpha \left( \dfrac{t}{\exp\{ \mathbf{x'} \boldsymbol{\beta} \}} \right) \right\}.
$$ {#eq-AFTexpSt}

Com função de risco dada por:

$$
\lambda(t | \mathbf{x}) = \alpha \exp\{ - \mathbf{x'} \boldsymbol{\beta} \}.
$$ {#eq-AFTexpht}

## Modelo Weibull

Para modelos AFT, baseados na distribuição Weibull, a função de sobrevivência é dada por:

$$
S (t | x) = \exp \left\{ - \left( \dfrac{t}{\alpha \exp\{ - \mathbf{x'} \boldsymbol{\beta} \} } \right)^{\gamma} \right\}.
$$ {#eq-AFTweibSt}

Assim, pode-se escrever a função de risco da distribuição Weibull como:

$$
\lambda(t | \mathbf{x}) = \dfrac{ \gamma }{ \alpha^{\gamma} } t^{\gamma - 1} \exp\{ - \mathbf{x'} \boldsymbol{\beta} \}
$$ {#eq-AFTeeibht}

## Modelo Exponencial por Partes

[...]

## Estimação de Parâmetros

Assim como no capítulo anterior, a estimação dos parâmetros será realizada pelo método de máxima verossimilhança. Recordando que a função de verossimilhança para dados censurados é expressa como:

```{=latex}
\begin{align*}
L(\theta) & = \prod_{i = 1}^{n} \left[f(t_{i} | \mathbf{x}) \right]^{\delta_{i}} \left[S(t_{i} | \mathbf{x}) \right]^{1 - \delta_{i}} \\
          & = \prod_{i = 1}^{n} \left[\lambda(t_{i} | \mathbf{x}) \right]^{\delta_{i}} S(t_{i} | \mathbf{x}),
\end{align*}
```

onde:

- $\delta_{i}$ é a variável indicadora, assumindo $1$ se $t_{i}$ for um tempo de falha observado e $0$ se for censurado;
- $f(t_{i}|\mathbf{x})$ representa a função densidade de probabilidade condicional;
- $S(t_{i}|\mathbf{x})$ é a função de sobrevivência condicional;
- $\lambda(t_{i}|\mathbf{x})$ corresponde à função de risco condicional.

O estimador de máxima verossimilhança (EMV) para $\theta$ é obtido maximizando a função de log-verossimilhança, dada por:

$$
\ln{L(\theta)} = \sum_{i = 1}^{n} \delta_{i} \ln{\lambda(t_{i}|\mathbf{x})} + \ln{S(t_{i}|\mathbf{x})}.
$$

Portanto, o parâmetro ou o conjunto de parâmetros $\theta$ que maximiza $\ln{L(\theta)}$ representa a melhor estimativa para a amostra observada, sendo obtido por métodos numéricos como o Newton-Raphson.

## Implementação Computacional

### Modelo Exponencial

#### Geração dos Dados

- **Funções de Geração:**

Pode-se simular dados de sobrevivência conforme um modelo AFT baseado na distribuição exponencial através da expressão:
$$
T = - \dfrac{\exp\{\mathbf{x'} \boldsymbol{\beta}\} \ln{[1 - U]} }{\alpha},
$$

onde $U \sim Uniforme(0, 1)$. Sendo este o *Método da Tranformação da Inversa*.

```{r}
time <- function(t=t, alpha.par=alpha.par, beta.par=beta.par, x.mat=x.mat, u.unif=u.unif){
  1 - pexp(q = t/exp(x.mat%*%beta.par), rate = alpha.par) - u.unif
}

gen.exp <- function(alpha.par=alpha.par, beta.par=beta.par, x.mat=x.mat){
  raiz <- uniroot(
    time, c(0, 10000), alpha.par=alpha.par, beta.par=beta.par,
    x.mat=x.mat, u.unif=runif(1)
  )
  
  exp.time <- raiz$root
}

sim.data <- function(n=n, alpha.par=alpha.par, beta.par=beta.par, x.mat=x.mat, alpha.parc=alpha.parc){
  t <- rep(0, n)     # Tempo de falha
  c <- rep(0, n)     # Tempo de censura
  times <- rep(0, n) # Tempo observado
  
  # Iteração
  for (i in 1:n){
    t[i] <- gen.exp(alpha.par=alpha.par, beta.par=beta.par, x.mat=x.mat[i, ])
    c[i] <- rexp(1, rate = alpha.parc)
    times[i] <- min(t[i], c[i])
  }
  
  # Tempos Observados
  delta <- ifelse(t <= c, 1, 0)
  dados <- data.frame(times, delta, x.mat)
  return(dados)
}
```

- **Simulação dos dados:**

```{r}
set.seed(123456789)

# Tamanho da amostra e número de variáveis
n <- 1000

# Parâmetro da distribuição exponencial
taxa <- 1.5

# Matriz Design
x1 <- rbinom(n = n, size = 1, prob=0.5)
x2 <- rnorm(n=n)
X <- cbind(1, x1, x2)

# Vetor de Coeficientes Betas
betas <- c(0.5, -0.5, 0.5)

# Simulando o Tempo de Sobrevivência
dados <- sim.data(n = n, alpha.par = taxa, beta.par = betas, x.mat = X, alpha.parc=taxa)

# Proporção de Falhas
prop <- mean(dados$delta)*100
```

Veja a @tbl-SIMULexpAFT que apresenta as dez primeiras observações simuladas.

```{r message=FALSE, warning=FALSE}
#| tbl-cap: "Dez primeiras observações Simuladas para Dados de Sobrevivência Censurados baseados no Modelo Exponencial."
#| label: tbl-SIMULexpAFT
#| tbl-cap-location: top

library(knitr)

kable(
  round(head(dados, 10), 4),
  col.names = c("Tempo", "Delta", "Constante", "X1 ~ Bern(0,5)", "X2 ~ Normal(0, 1)"),
  escape = FALSE,
  align = "c",
  booktabs = TRUE
)
```

A proporção de censura nos dados foi: `r prop`%.

#### Ajuste do modelo ATF usando o pacote `survival`:

```{r}
library(survival)
ajust <- survreg(Surv(times, delta)~x1+x2, dist = "exponential", data=dados)
summary(ajust)
```

#### Usando a função `optim`

- **Implementando a função log-verossimilhança:**

A função log-verossimilhança, a ser maximizada, para um modelo AFT baseado na distribuição exponencial é dada por:

$$
\ln L(\theta) = \sum_{i = 1}^{n} \delta_{i} \ln{ \alpha \exp\{ - \mathbf{x'}_{i} \boldsymbol{\beta} \} } + \ln{ \exp \left\{- \alpha \left( \dfrac{t_{i}}{\exp\{ \mathbf{x'}_{i} \boldsymbol{\beta} \}} \right) \right\} }.
$$

```{r}
StAFTexp <- function(t, alpha.par, x.mat=x.mat, beta.par) {
  # Combinação linear dos preditores lineares
  effect <- x.mat %*% beta.par
  St <- 1 - pexp(q = t/exp(effect), rate = alpha.par)
  return(St)
}

htAFTexp <- function(t, alpha.par, x.mat=x.mat, beta.par) {
  # Combinação linear dos preditores lineares
  effect <- x.mat %*% beta.par
  ht <- alpha.par / exp(effect)
}

loglikelihood <- function(par, times, delta, x.mat) {
  npar <- length(par)
  alpha <- par[1]
  betas <- par[2:npar]
  
  St <- StAFTexp(t=times, alpha.par=alpha, beta.par=betas, x.mat=x.mat)
  ht <- htAFTexp(t=times, alpha.par=alpha, beta.par=betas, x.mat=x.mat)
  
  flv <- sum(delta*log(ht) + log(St))
  return(-flv)
}
```

- **Maximizando:**

```{r, warning=FALSE}
init <- rep(1, 4)

X <- as.matrix(dados[, 3:ncol(dados)])

fit <- optim(par=init, fn = loglikelihood, 
             gr = NULL, method = "BFGS", hessian = TRUE, 
             times=dados$times, delta=dados$delta, x.mat=X)
fit
```

### Modelo Weibull

Pode-se simular dados de sobrevivência conforme um modelo AFT baseado na distribuição Weibull através da expressão:
$$
T = - \alpha \exp\{\mathbf{x'} \boldsymbol{\beta}\} (\ln{[1 - U]})^{1/\gamma},
$$

onde $U \sim Uniforme(0, 1)$. Sendo este o *Método da Tranformação da Inversa*.

#### Geração dos Dados

- **Funções de Geração:**

```{r}
time <- function(t=t, gamma.par=gamma.par, alpha.par=alpha.par,
                 beta.par=beta.par, x.mat=x.mat, u.unif=u.unif ){
  1 - pweibull(q = t/exp(x.mat%*%beta.par), shape = gamma.par, scale = alpha.par) - u.unif
}

gen.weib <- function(gamma.par=gamma.par, alpha.par=alpha.par, beta.par=beta.par, x.mat=x.mat){
  raiz <- uniroot(time, c(0.00001, 10000), gamma.par=gamma.par, alpha.par=alpha.par,
                  beta.par=beta.par, x.mat=x.mat, u.unif=runif(1))
  weib.time <- raiz$root
  return(weib.time)
}

sim.data.weib <- function(n=n, gamma.par=gamma.par, alpha.par=alpha.par, beta.par=beta.par,
                          x.mat=x.mat, alpha.parc=alpha.parc){
  t <- rep(0, n)     # Tempo de falha
  c <- rep(0, n)     # Tempo de censura
  times <- rep(0, n) # Tempo observado
  
  # Iteração
  for (i in 1:n){
    t[i] <- gen.weib(gamma.par=gamma.par, alpha.par=alpha.par, beta.par=beta.par, x.mat=x.mat[i,])
    c[i] <- rexp(1, rate = alpha.parc)
    times[i] <- min(t[i], c[i])
  }
  
  # Tempos Observados
  delta <- ifelse(t <= c, 1, 0) 
  dados <- data.frame(times, delta, x.mat)
}
```

- **Simulação dos dados:**

```{r}
set.seed(123456789)

# Tamanho da amostra e número de variáveis
n <- 1000

# Parâmetro da distribuição Weibull
shape <- 2
scale <- 1.5

# Matriz Design
x1 <- rbinom(n = n, size = 1, prob=0.5)
x2 <- rnorm(n=n)
X <- cbind(1, x1, x2)

# Vetor de Coeficientes Betas
betas <- c(0.5, -0.5, 0.5)

# Simulando o Tempo de Sobrevivência
dados <- sim.data.weib(n = n, gamma.par = shape, alpha.par = scale, beta.par = betas,
                       x.mat = X, alpha.parc = 1)

# Proporção de Falhas
prop <- mean(dados$delta)*100
```

Veja a @tbl-SIMULweibAFT que apresenta as dez primeiras observações simuladas.

```{r message=FALSE, warning=FALSE}
#| tbl-cap: "Dez primeiras observações Simuladas para Dados de Sobrevivência Censurados baseados no Modelo Weibull."
#| label: tbl-SIMULweibAFT
#| tbl-cap-location: top

library(knitr)

kable(
  round(head(dados, 10), 4),
  col.names = c("Tempo", "Delta", "Constante", "X1 ~ Bern(0,5)", "X2 ~ Normal(0, 1)"),
  escape = FALSE,
  align = "c",
  booktabs = TRUE
)
```

A proporção de censura nos dados foi: `r prop`%.

#### Ajuste do modelo ATF usando o pacote `survival`:

```{r}
library(survival)
ajust <- survreg(Surv(times, delta)~x1+x2, dist = "weibull", data=dados)
summary(ajust)
```

#### Usando a função `optim`

- **Implementando a função log-verossimilhança:**

A função log-verossimilhança, a ser maximizada, para um modelo AFT baseado na distribuição Weibull é dada por:

$$
\ln L(\theta) = \sum_{i = 1}^{n} \delta_{i} \ln{ \dfrac{ \gamma }{ \alpha^{\gamma} } t_{i}^{\gamma - 1} \exp\{ - \mathbf{x'}_{i} \boldsymbol{\beta} \} } + \ln{ \exp \left\{ - \left( \dfrac{t_{i}}{\alpha \exp\{ - \mathbf{x'}_{i} \boldsymbol{\beta} \} } \right)^{\gamma} \right\} }.
$$

```{r}
StAFTweib <- function(t=times, gamma.par=gamma.par, alpha.par=alpha.par, x.mat=x.mat, beta.par=beta.par) {
  elimpred <- as.numeric(exp(x.mat%*%beta.par))
  St <- 1 - pweibull(q = t/elimpred, shape = gamma.par, scale = alpha.par)
  return(St)
}

htAFTweib <- function(t=times, gamma.par=gamma.par, alpha.par=alpha.par, x.mat=x.mat, beta.par=beta.par) {
  elimpred <- as.numeric(exp(x.mat%*%beta.par))
  f0 <- dweibull(x = t/elimpred, shape = gamma.par, scale = alpha.par)
  s0 <- 1 - pweibull(q = t/elimpred, shape = gamma.par, scale = alpha.par)
  h0 <- f0/s0
  ht <- h0 / exp(x.mat%*%beta.par)
  return(ht)
}

loglikelihood <- function(par, times, delta, x.mat) {
  npar <- length(par)
  gamma.par <- par[1]
  alpha.par <- par[2]
  beta.par <- par[3:npar]
  
  St <- StAFTweib(t=times, gamma.par=gamma.par, alpha.par=alpha.par, 
                 beta.par=beta.par, x.mat=x.mat)
  ht <- htAFTweib(t=times, gamma.par=gamma.par, alpha.par=alpha.par, 
                 beta.par=beta.par, x.mat=x.mat)
  
  flv <- sum(delta*log(ht) + log(St))
  return(-flv)
}
```

- **Maximizando:**

```{r, warning=FALSE}
init <- rep(1, 5)

X <- as.matrix(dados[, 3:ncol(dados)])

fit <- optim(par=init, fn = loglikelihood, 
             gr = NULL, method = "BFGS", hessian = TRUE, 
             times=dados$times, delta=dados$delta, x.mat=X)
fit
```

### Modelo Exponencial por Partes

:::: progress
:::: {.progress-bar style="width: 100%;"}
::::
::::
